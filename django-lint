#!/usr/bin/env python

import os
import sys

from pylint import checkers, lint
from optparse import OptionParser

from DjangoLint import AstCheckers

def main():
    usage = """ %prog target [options]

    Django Lint is a tool that statically analyses Django projects and
    applications, checking for programming errors and bad code smells. For
    example, it reports nullable "CharField" fields, as well as reporting for
    unspecified options in settings.py.

    The `target` argument is mandatory and can specify either a directory
    containing a Django project, a single application or a single file.
    """.rstrip()

    parser = OptionParser(usage=usage)
    parser.add_option(
        '-r',
        '--reports',
        dest='report',
        action='store_true',
        default=False,
        help='generate report',
    )

    options, args = parser.parse_args()

    if len(args) != 1:
        raise parser.error("The 'target' argument is mandatory")

    target = os.path.abspath(args[0])

    if not os.path.exists(target):
        raise parser.error(
            "The specified target (%r) does not exist" \
                % target
        )

    path = target
    while True:
        flag = False
        for django_file in ('manage.py', 'models.py', 'urls.py'):
            if os.path.exists(os.path.join(path, django_file)):
                sys.path.insert(0, os.path.dirname(path))
                flag = True
                break
        if flag:
            break

        path = os.path.dirname(path)

        if path == '/':
            raise parser.error(
                "The specified target (%r) does not appear to be part of a " \
                "Django application" % target
            )

    linter = lint.PyLinter()
    linter.set_option('reports', options.report)
    checkers.initialize(linter)

    for msg in ('C0111', 'C0301'):
        linter.disable_message(msg)

    AstCheckers.register(linter)
    linter.check([target])

    return 0

if __name__ == "__main__":
    sys.exit(main())
